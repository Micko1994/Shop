#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const http = require('http')
const cookieParser = require('cookie-parser')
const session = require('express-session')
const passportSocketIo = require('passport.socketio')
const Promise = require('bluebird')
const config = require('../config/config')

/**
 * Get port from environment and store in Express.
 */
process.setMaxListeners(0)
const port = normalizePort(process.env.PORT || '5090')

app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/*
 * Socket connections
 */
const io = require('socket.io')(server)

io.set('authorization', passportSocketIo.authorize({
  cookieParser: cookieParser,
  key: config.COOKIE.KEY, // the name of the cookie where express/connect stores its session_id
  secret: config.COOKIE.SECRET, // the session_secret to parse the cookie
  success: function (data, accept) { // *optional* callback on success - read more below
    console.log('success')
    require('../routes-io/index')(io)
    accept(null, true)
  },
  fail: function (data, message, error, accept) {
    console.log(message)
    console.log(error)
  }
}))

/**
 * Listen on provided port, on all network interfaces.
 */
Promise.resolve().then(() => {
  server.listen(port, process.env.LISTEN_CUSTOM_BIND_ADDRESS || 'localhost')
  server.on('error', onError)
  server.on('listening', onListening)
})

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log('Listening on ' + bind)
}
